import numpy as np
from scipy.integrate import solve_bvp
import matplotlib.pyplot as plt

def fun(x, y):
    return np.vstack((y[1], -np.exp(-2*y[0])))

def bc(ya, yb):
    return np.array([ya[0], yb[0] - np.log(2)])

# Initial mesh
x = np.linspace(1, 2, 100)
y_guess = np.zeros((2, x.size))

# Solve the boundary value problem
sol = solve_bvp(fun, bc, x, y_guess)

# Plot the solution
x_plot = np.linspace(1, 2, 100)
y_plot = sol.sol(x_plot)[0]

plt.plot(x_plot, y_plot, label='Numerical Solution')
plt.scatter([1, 2], [0, np.log(2)], color='red', label='Boundary Conditions')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Numerical Solution of y\'\' = -e^(-2y)')
plt.legend()
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Load the saved plot image
img = mpimg.imread('PartA.png')

# Display the image
plt.imshow(img)
plt.axis('off')  # Turn off axis labels and ticks
plt.show()
