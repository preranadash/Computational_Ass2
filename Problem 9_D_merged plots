import numpy as np
from scipy.integrate import solve_bvp
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Define the differential equation and boundary conditions for Python
def fun_python(x, y):
    epsilon = 1e-10  # small positive value to avoid logarithm of zero
    return np.vstack((y[1], 1/2 - (y[1] ** 2) / 2 - y[0] * np.sin(x) / 2 + epsilon))

def bc_python(ya, yb):
    return np.array([ya[0] - 2, yb[0] - 2])

# Generate x values for plotting
x_python = np.linspace(0, np.pi, 100)

# Initial guess for the solution in Python
y_guess_python = np.zeros((2, x_python.size))
y_guess_python[0] = 0  # initial guess for y
y_guess_python[1] = 0  # initial guess for y'

# Solve the boundary value problem numerically using scipy.integrate.solve_bvp
sol_python = solve_bvp(fun_python, bc_python, x_python, y_guess_python)

# Load the saved plot image from Mathematica
img_mathematica = mpimg.imread('analyticalD.png')

# Plot the numerical solution from Python
plt.plot(sol_python.x, sol_python.y[0], label='Python Numerical Solution')

# Display the image plot from Mathematica
plt.imshow(img_mathematica, extent=[0, np.pi, sol_python.y[0].min(), sol_python.y[0].max()], aspect='auto', alpha=0.5)

# Set plot labels and title
plt.xlabel('x')
plt.ylabel('y')
plt.title('Comparison of Python and Mathematica Solutions')
plt.legend()
plt.grid(True)
plt.show()
